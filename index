<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Medical Chatbot UI Extensions Demo</title>
</head>
<body style="font-family: sans-serif;">
  <h1 style="text-align: center;">Medical Chatbot UI Extensions Demo</h1>
  <p style="text-align: center;">This page demonstrates 4 Chatdash + Voiceflow UI extensions: Contact Form, Checkbox Form, Date Picker, and Carousel.</p>

  <div id="cd-widget"></div>

  <!-- Load React (required for extensions) -->
  <script src="https://unpkg.com/react/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom/umd/react-dom.development.js"></script>

  <!-- Embed Chatdash + Extensions -->
  <script>
    const createExtensionComponent = (renderFunc) => {
      return class ExtensionComponent extends React.Component {
        constructor(props) {
          super(props);
          this.elementRef = React.createRef();
          this.cleanupFunction = null;
        }
        componentDidMount() { this.renderExtension(); }
        componentDidUpdate(prevProps) {
          if (prevProps.isExecuted !== this.props.isExecuted) this.renderExtension();
        }
        componentWillUnmount() {
          if (typeof this.cleanupFunction === 'function') this.cleanupFunction();
        }
        renderExtension() {
          if (this.elementRef.current) {
            if (this.cleanupFunction) this.cleanupFunction();
            this.cleanupFunction = renderFunc(
              this.props.message,
              this.props.handlePathForExtension,
              this.elementRef.current,
              this.props.isExecuted
            );
          }
        }
        shouldComponentUpdate(nextProps) {
          return nextProps.message !== this.props.message || nextProps.isExecuted !== this.props.isExecuted;
        }
        render() {
          return React.createElement('div', { ref: this.elementRef });
        }
      };
    };

    const ContactForm = createExtensionComponent((message, handlePathForExtension, element) => {
      element.innerHTML = `
        <form id="contact-form" style="font-family: 'Times New Roman'; color: #FE3A3A;">
          <label>Name</label><br/>
          <input type="text" name="name" required /><br/>
          <label>Phone</label><br/>
          <input type="tel" name="phone" required /><br/>
          <label>Email</label><br/>
          <input type="email" name="email" required /><br/><br/>
          <button type="submit">Submit</button>
        </form>
      `;
      element.querySelector('#contact-form').addEventListener('submit', (e) => {
        e.preventDefault();
        const form = e.target;
        handlePathForExtension({
          type: 'complete',
          payload: {
            name: form.name.value,
            phone: form.phone.value,
            email: form.email.value
          }
        });
      });
    });

    const CheckboxForm = createExtensionComponent((message, handlePathForExtension, element) => {
      element.innerHTML = `
        <form id="checkbox-form" style="font-family: Arial; color: #3E82E9;">
          <label><input type="checkbox" name="option1"> Option 1</label><br/>
          <label><input type="checkbox" name="option2"> Option 2</label><br/>
          <label><input type="checkbox" name="option3"> Option 3</label><br/>
          <label><input type="checkbox" name="option4"> Option 4</label><br/>
          <label><input type="checkbox" name="option5"> Option 5</label><br/><br/>
          <label>Other:</label><br/>
          <input type="text" name="other" /><br/><br/>
          <button type="submit">Submit</button>
        </form>
      `;
      element.querySelector('#checkbox-form').addEventListener('submit', (e) => {
        e.preventDefault();
        const form = e.target;
        handlePathForExtension({
          type: 'complete',
          payload: {
            option1: form.option1.checked,
            option2: form.option2.checked,
            option3: form.option3.checked,
            option4: form.option4.checked,
            option5: form.option5.checked,
            other: form.other.value
          }
        });
      });
    });

    const DatePicker = createExtensionComponent((message, handlePathForExtension, element) => {
      element.innerHTML = `
        <form id="date-form" style="font-family: Arial;">
          <label>Select a date:</label><br/>
          <input type="date" name="date" required /><br/><br/>
          <button type="submit">Submit</button>
        </form>
      `;
      element.querySelector('#date-form').addEventListener('submit', (e) => {
        e.preventDefault();
        const form = e.target;
        handlePathForExtension({
          type: 'complete',
          payload: { date: form.date.value }
        });
      });
    });

    const Carousel = createExtensionComponent((message, handlePathForExtension, element) => {
      const cards = [
        { title: "Acupuncture", img: "https://images.unsplash.com/photo-1598555763574-dca77e10427e?q=80&w=2994&auto=format&fit=crop&ixlib=rb-4.1.0" },
        { title: "Chiropractic", img: "https://images.unsplash.com/photo-1645005512968-0c1fe99f0093?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.1.0" },
        { title: "Bowen Therapy", img: "https://images.unsplash.com/photo-1650044252595-cacd425982ff?q=80&w=2940&auto=format&fit=crop&ixlib=rb-4.1.0" },
        { title: "Craniosacral Therapy", img: "https://media.post.rvohealth.io/wp-content/uploads/sites/3/2024/10/Craniosacral-therapy-head-massage-1200-628-facebook.jpg" },
        { title: "Cupping Therapy", img: "https://my.clevelandclinic.org/-/scassets/images/org/health/articles/16554-cupping-therapy" }
      ];
      const html = cards.map(card => `
        <div style="display:inline-block; margin:10px; width:150px; text-align:center;">
          <img src="${card.img}" alt="${card.title}" style="width:100%; height:auto; border-radius:8px;">
          <div>${card.title}</div>
        </div>
      `).join('');
      element.innerHTML = `<div style="white-space: nowrap; overflow-x: auto;">${html}</div>`;
    });

    // Load Chatdash widget with extensions
    (function() {
      if (window.chatWidgetScriptLoaded) return;
      window.ChatWidgetConfig = {
        projectId: "6808ed11c197fd3a7d2a0418",
        extensions: [
          {
            type: 'extension',
            extensionType: 'response',
            name: 'ContactForm',
            match: (msg) => msg.type === 'ext_contact_form',
            component: ContactForm
          },
          {
            type: 'extension',
            extensionType: 'response',
            name: 'CheckboxForm',
            match: (msg) => msg.type === 'ext_checkbox_form',
            component: CheckboxForm
          },
          {
            type: 'extension',
            extensionType: 'response',
            name: 'DatePicker',
            match: (msg) => msg.type === 'ext_date_picker',
            component: DatePicker
          },
          {
            type: 'extension',
            extensionType: 'response',
            name: 'Carousel',
            match: (msg) => msg.type === 'ext_carousel',
            component: Carousel
          }
        ]
      };

      var chatWidgetScript = document.createElement("script");
      chatWidgetScript.type = "text/javascript";
      chatWidgetScript.src = "https://storage.googleapis.com/cdwidget/dist/assets/js/main.js";
      document.body.appendChild(chatWidgetScript);

      window.chatWidgetScriptLoaded = true;
    })();
  </script>
</body>
</html>
